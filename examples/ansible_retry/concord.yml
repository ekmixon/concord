configuration:
  dependencies:
    - "mvn://com.walmartlabs.concord.plugins.basic:ansible-tasks:1.76.1"

  arguments:
    attempts: 0
    maxAttempts: 5
    retryFile: null
    makeItFail: true # just to simulate a failure inside of the playbook

flows:
  default:
    # simply retry immediately after failure
    - task: ansible
      in:
        playbook: playbook/hello.yml
        inventory:
          local:
            hosts:
              - "127.0.0.1"
              - "127.0.0.2"
              - "127.0.0.3"
            vars:
              ansible_connection: "local"
        extraVars:
          makeItFail: "${makeItFail}"
      retry:
        # specify new task parameters on the retry
        in:
          retry: true # force Ansible to re-use the existing *.retry file

          # this bit is just for example
          extraVars: # override the task's `extraVars` on retry
            makeItFail: false # this time the playbook should succeed

        times: 1
        delay: 3

  retryAfterSuspend:
    # Retry the playbook after suspending for some period of time
    - try:
        - task: ansible
          in:
            playbook: playbook/hello.yml
            limit: "${retryFile}"  # default is null, will be a .retry file on retries
            inventory:
              local:
                hosts:
                  - "127.0.0.1"
                  - "127.0.0.2"
                  - "127.0.0.3"
                vars:
                  ansible_connection: "local"
            extraVars:
              makeItFail: "${makeItFail}"
      error:
        - log: "Ansible error: ${lastError.cause}"

        # Save retry file as an attachment
        - call: saveRetryFile
        - if: "${(attempts + 1) >= maxAttempts}"  # give up eventually
          then:
            - throw: "Too many attempts for hosts: ${resource.asString(retryFile)}"

        # suspend until retry time
        - task: sleep
          in:
            suspend: true
            # 3 seconds to prove the point
            # more useful would be 2 hours: ${2 * 60 * 60)
            duration: 3
        # try again, with retry file
        - call: retryAfterSuspend
          in:
            attempts: "${attempts + 1}"
            retryFile: "@${retryFile}"

  retryAfterForm:
    # Prompt to retry playbook after failure
    - try:
        - task: ansible
          in:
            playbook: playbook/hello.yml
            limit: "${retryFile}"  # default is null, will be a .retry file on retries
            inventory:
              local:
                hosts:
                  - "127.0.0.1"
                  - "127.0.0.2"
                  - "127.0.0.3"
                vars:
                  ansible_connection: "local"
            extraVars:
              makeItFail: "${makeItFail}"
      error:
        - log: "Ansible error: ${lastError.cause}"

        # Save retry file as an attachment
        - call: saveRetryFile
        - if: "${(attempts + 1) >= maxAttempts}"  # give up eventually
          then:
            - throw: "Too many attempts for hosts: ${resource.asString(retryFile)}"

        - form: retryForm
          fields:
            - doRetry: { label: "Retry deployment?", type: "boolean" }
            - makeItFail: { label: "Make deployment fail?", type: "boolean" }
        - if: "${retryForm.doRetry}"
          then:
            # try again, with retry file
            - call: retryAfterForm
              in:
                attempts: "${attempts + 1}"
                retryFile: "@${retryFile}"
                makeItFail: "${retryForm.makeItFail}"
          else:
            - log: "Retry denied"
            - exit

  # Sets variables:
  # * retryFile - path to the persisted retry file
  saveRetryFile:
    - script: js
      body: |
        var Files = java.nio.file.Files;
        var Paths = java.nio.file.Paths;
        var StandardCopyOption = java.nio.file.StandardCopyOption;

        var src = Paths.get('playbook/hello.retry');
        var dst = Paths.get('_attachments/hello.retry')

        Files.copy(src, dst, StandardCopyOption.REPLACE_EXISTING);
        execution.setVariable('retryFile', dst.toString());
    - log: "Retry file is: ${retryFile}"
